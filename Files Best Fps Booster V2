local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

local table_insert = table.insert
local table_clear = table.clear

type Maybe<T> = T | nil
type CullingClass = "ParticleEmitter" | "Light" | "Sound" | "Smoke" | "Fire" | "Trail"
type OriginalProperties = { [string]: any }

type ManagedObjectData = {
	instance: Instance,
	className: CullingClass,
	originalProperties: OriginalProperties,
	hidden: boolean,
}

local AutonomousCullingService = {}

local CONFIG = {
	UpdateInterval = 0.15,
	FpsReduceThreshold = 45,
	FpsRestoreThreshold = 55,
	CullableClasses = {
		ParticleEmitter = { DistSqr = 150 * 150, MaxCount = 30 },
		Light = { DistSqr = 180 * 180, MaxCount = 15 },
		Sound = { DistSqr = 100 * 100, MaxCount = 20 },
		Smoke = { DistSqr = 160 * 160, MaxCount = 25 },
		Fire = { DistSqr = 160 * 160, MaxCount = 25 },
		Trail = { DistSqr = 170 * 170, MaxCount = 25 },
	}
}

local camera: Maybe<Camera> = Workspace.CurrentCamera
local managedObjects: { [Instance]: ManagedObjectData } = setmetatable({}, {__mode = "k"})
local candidates: { [string]: {{obj: Instance, distSqr: number}} } = {}

local updateAccumulator: number = 0
local lastFps: number = 60
local isProcessing: boolean = false
local renderSteppedConnection: Maybe<RBXScriptConnection>
local descendantAddedConnection: Maybe<RBXScriptConnection>
local cameraChangedConnection: Maybe<RBXScriptConnection>

local function getPosition(instance: Instance): (Maybe<Vector3>)
	if instance:IsA("BasePart") then
		return instance.Position
	end
	
	local parent = instance.Parent
	if parent then
		if parent:IsA("BasePart") then
			return parent.Position
		elseif parent:IsA("Attachment") then
			return parent.WorldPosition
		end
	end
	return nil
end

local function shouldAlwaysKeep(obj: Instance): boolean
	if not obj.Parent then return false end
	if obj:IsA("Accessory") then return true end
	
	local localPlayer = Players.LocalPlayer
	local character = localPlayer and localPlayer.Character
	if not character then return false end
	
	return obj:IsDescendantOf(character)
end

local function hideObject(data: ManagedObjectData)
	pcall(function()
		if data.hidden then return end
		local instance = data.instance
		if not instance or not instance.Parent then return end

		data.originalProperties = {}
		
		if instance:IsA("ParticleEmitter") or instance:IsA("Trail") or instance:IsA("Light") or instance:IsA("Smoke") or instance:IsA("Fire") then
			data.originalProperties.Enabled = instance.Enabled
			instance.Enabled = false
		elseif instance:IsA("Sound") then
			data.originalProperties.IsPlaying = instance.IsPlaying
			if instance.IsPlaying then
				instance:Pause()
			end
		end
		data.hidden = true
	end)
end

local function restoreObject(data: ManagedObjectData)
	pcall(function()
		if not data.hidden then return end
		local instance = data.instance
		if not instance or not instance.Parent then return end
		
		if instance:IsA("ParticleEmitter") or instance:IsA("Trail") or instance:IsA("Light") or instance:IsA("Smoke") or instance:IsA("Fire") then
			if data.originalProperties.Enabled ~= nil then
				instance.Enabled = data.originalProperties.Enabled
			end
		elseif instance:IsA("Sound") then
			if data.originalProperties.IsPlaying then
				instance:Play()
			end
		end
		
		data.originalProperties = {}
		data.hidden = false
	end)
end

local function getAdaptiveMultiplier(dt: number): number
	if dt == 0 then return 1.0 end
	local fps = 1 / dt
	lastFps = lastFps * 0.9 + fps * 0.1
	if lastFps < CONFIG.FpsReduceThreshold then
		return 0.6
	elseif lastFps < CONFIG.FpsRestoreThreshold then
		return 0.85
	end
	return 1.0
end

local function onDescendantAdded(descendant: Instance)
	if managedObjects[descendant] then return end

	for className, _ in pairs(CONFIG.CullableClasses) do
		if descendant:IsA(className) then
			managedObjects[descendant] = {
				instance = descendant,
				className = className :: CullingClass,
				originalProperties = {},
				hidden = false,
			}
			break
		end
	end
end

local function processWorkspace(dt: number)
	if isProcessing then return end
	isProcessing = true
	
	updateAccumulator += dt
	if updateAccumulator < CONFIG.UpdateInterval then 
		isProcessing = false
		return 
	end
	updateAccumulator -= CONFIG.UpdateInterval

	if not camera then 
		isProcessing = false
		return 
	end
	
	local cameraPos = camera.CFrame.Position
	local multiplier = getAdaptiveMultiplier(dt)
	
	for className, _ in pairs(CONFIG.CullableClasses) do
		candidates[className] = candidates[className] or {}
		table_clear(candidates[className])
	end
	
	for instance, data in pairs(managedObjects) do
		if instance.Parent and not shouldAlwaysKeep(instance) then
			local pos = getPosition(instance)
			if pos then
				local cullInfo = CONFIG.CullableClasses[data.className]
				if cullInfo then
					local offset = pos - cameraPos
					local distSqr = offset.X*offset.X + offset.Y*offset.Y + offset.Z*offset.Z
					
					if distSqr < (cullInfo.DistSqr * multiplier) then
						table_insert(candidates[data.className], {obj = instance, distSqr = distSqr})
					else
						hideObject(data)
					end
				end
			end
		else
			if data and data.hidden then
				restoreObject(data)
			end
		end
	end
	
	for className, classCandidates in pairs(candidates) do
		table.sort(classCandidates, function(a, b) return a.distSqr < b.distSqr end)
		local maxCount = CONFIG.CullableClasses[className].MaxCount
		for i, item in ipairs(classCandidates) do
			local data = managedObjects[item.obj]
			if data then
				if i <= maxCount then
					restoreObject(data)
				else
					hideObject(data)
				end
			end
		end
	end
	
	isProcessing = false
end

function AutonomousCullingService:Init()
	for _, descendant in ipairs(Workspace:GetDescendants()) do
		onDescendantAdded(descendant)
	end
	
	descendantAddedConnection = Workspace.DescendantAdded:Connect(onDescendantAdded)
	renderSteppedConnection = RunService.RenderStepped:Connect(processWorkspace)
	
	cameraChangedConnection = Workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
		camera = Workspace.CurrentCamera
	end)
end

function AutonomousCullingService:Cleanup()
	if renderSteppedConnection then
		renderSteppedConnection:Disconnect()
		renderSteppedConnection = nil
	end
	if descendantAddedConnection then
		descendantAddedConnection:Disconnect()
		descendantAddedConnection = nil
	end
	if cameraChangedConnection then
		cameraChangedConnection:Disconnect()
		cameraChangedConnection = nil
	end

	for _, data in pairs(managedObjects) do
		if data.hidden then
			restoreObject(data)
		end
	end
	table_clear(managedObjects)
end

AutonomousCullingService:Init()
return AutonomousCullingService
